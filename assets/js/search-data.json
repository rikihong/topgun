{
  
    
        "post0": {
            "title": "KPI Report",
            "content": "import pandas as pd import datetime . stime = datetime.datetime.now() d_today = datetime.date.today() yr = d_today.strftime(&#39;%y&#39;) # 현재 년도 가져오기 mn = d_today.month-1 # 실적월 가져오기 now_date = (&quot;&#39;&quot; + yr + &#39;. &#39; + str(mn+1) + &#39;월&#39;) past_date = (&quot;&#39;&quot; + yr + &#39;.&#39; + str(mn) + &#39;월&#39;) . import docx from openpyxl import load_workbook #from docx.shared import Pt #from docx.enum.text import WD_ALIGN_PARAGRAPH data_df = pd.read_excel(&#39;D: 2022년 M-MAP TF KPI Report RPA 법인별 KPI.xlsx&#39;, sheet_name = &#39;지표별 Raw(월별실적)&#39;, usecols = &quot;A:C, R:AE, AI:BG&quot;, header = 4) data_df.rename(columns={&#39;Unnamed: 0&#39; : &#39;kpi&#39;,&#39;Unnamed: 1&#39; : &#39;gbm&#39;, &#39;Unnamed: 2&#39; : &#39;factory&#39;}, inplace = True ) # 공백줄 제외 data_df = data_df[data_df[&#39;kpi&#39;].isna() == False ] # 띄어쓰기 제외 data_df[&#39;kpi&#39;] = data_df[&#39;kpi&#39;].str.replace(&#39; &#39;, &#39;&#39;) doc = docx.Document(&#39;D: 2022년 M-MAP TF KPI Report RPA ★ DX부문 제조KPI.docx&#39;) . # 법인값 삭제,Nan값 삭제 #gbm_df = data_df[data_df[&#39;factory&#39;].isna() == True ] gbm_list = [&#39;DX&#39;, &#39;MX&#39;, &#39;VD&#39;, &#39;생활가전&#39;, &#39;네트워크&#39; , &#39;의료기기&#39;] kpi_list = [&#39;대당제조가공비&#39;, &#39;인당생산대수&#39;, &#39;자동화율&#39;, &#39;공급능력지수&#39;, &#39;운영Capa가동율&#39;, &#39;총공정불량율&#39;, &#39;제조인력&#39;, &#39;SOP실행율&#39;] part_list = [&#39;CNC&#39;, &#39;CNC&#39;, &#39;VD LCM&#39;, &#39;COMP&#39;, &#39;-&#39;, &#39;-&#39;] #표넘버 t = 1 col = [] col_part = [] for g_lst in range(0, len(gbm_list)) : table = doc.tables[t] for row in table.rows : if row.cells[1].paragraphs[0].text != &#39;&#39; : #표 KPI 넣기 t_kpi = row.cells[1].paragraphs[0].text t_kpi = t_kpi.replace(&#39;(Set)&#39;, &#39;&#39;) t_kpi = t_kpi.replace(&#39;(W/S)&#39;, &#39;&#39;) # kpi와 사업부 조건에 맞는 것만 찾기 df = data_df[(data_df[&#39;kpi&#39;].str.contains(t_kpi)) &amp; (data_df[&#39;gbm&#39;].str.contains(gbm_list[g_lst]))] df.reset_index(drop = True, inplace = True) #부품 추가 part_df = data_df[(data_df[&#39;kpi&#39;].str.contains(&#39;대당제조가공비&#39;)) &amp; (data_df[&#39;gbm&#39;].str.contains(part_list[g_lst]))] part_df.reset_index(drop = True, inplace = True) if df.empty == False : col.append(df.iloc[0,3]) col.append(df.loc[0,&#39;누적목표&#39;]) col.append(df.loc[0,past_date + &#39;누적&#39;]) col.append(df.iloc[0,1+mn]) col.append(df.iloc[0,2+mn]) col.append(df.iloc[0,3+mn]) col.append(df.iloc[0,16]) c = len(col) table.rows[1].cells[4].paragraphs[0].text = str(mn) +&#39;월&#39; table.rows[1].cells[c].paragraphs[0].text = str(mn) +&#39;월&#39; table.rows[1].cells[c-1].paragraphs[0].text = str(mn-1) +&#39;월&#39; table.rows[1].cells[c-2].paragraphs[0].text = str(mn-2) +&#39;월&#39; #################################################################################################################################### if t_kpi == &#39;대당제조가공비&#39; : for i in range(0, c) : # 실제 값 넣기 # 의료기기값의 경우는 소숫점 없이 표기 if col[i] &gt; 10000 : row.cells[i+2].paragraphs[0].text = &#39;{:0,.0f}&#39;.format(col[i]) else : row.cells[i+2].paragraphs[0].text = &#39;{:0,.2f}&#39;.format(col[i]) # 달성율 값 row.cells[c+2].paragraphs[0].text = &#39;{:0,.0f}%&#39;.format(df.loc[0,past_date + &#39;누적&#39;] / df.iloc[0,16] *100) # 전년비값 rate = (df.iloc[0,16] / df.iloc[0,3] -1) * 100 if rate &gt;= 0.5 : rate = str(&#39;{:0,.1f}%&#39;.format(rate)) + &#39;↑&#39; elif rate &lt;= -0.5 : rate = str(&#39;{:0,.1f}%&#39;.format(abs(rate))) + &#39;↓&#39; else : rate = &#39;-&#39; row.cells[c+3].paragraphs[0].text = rate row.cells[2].paragraphs[0].add_run(&#39;$&#39;) if part_df.empty == False : col_part.append(part_df.iloc[0,3]) col_part.append(part_df.loc[0,&#39;누적목표&#39;]) col_part.append(part_df.loc[0,past_date + &#39;누적&#39;]) col_part.append(part_df.iloc[0,1+mn]) col_part.append(part_df.iloc[0,2+mn]) col_part.append(part_df.iloc[0,3+mn]) col_part.append(part_df.iloc[0,16]) cp = len(col_part) for ii in range(0, cp) : # 실제 값 넣기 row.cells[ii+2].paragraphs[1].text = &#39;{:0,.2f}&#39;.format(col_part[ii]) row.cells[cp+2].paragraphs[1].text = &#39;{:0,.0f}%&#39;.format(round(part_df.loc[0,past_date + &#39;누적&#39;],2) / round(part_df.iloc[0,16],2) *100) # 달성율 값 rate = (round(part_df.iloc[0,16],2) / round(part_df.iloc[0,3],2) -1) * 100 if rate &gt;= 0.5 : rate = str(&#39;{:0,.1f}%&#39;.format(rate)) + &#39;↑&#39; elif rate &lt;= -0.5 : rate = str(&#39;{:0,.1f}%&#39;.format(abs(rate))) + &#39;↓&#39; else : rate = &#39;-&#39; row.cells[cp+3].paragraphs[1].text = rate row.cells[2].paragraphs[1].add_run(&#39;$&#39;) col_part = [] ##################################################################################################################################### elif t_kpi == &#39;인당생산대수&#39; : for i in range(0, c) : # 실제 값 넣기 row.cells[i+2].paragraphs[0].text = &#39;{:0,.1f}&#39;.format(col[i]) # 달성율 값 row.cells[c+2].paragraphs[0].text = &#39;{:0,.0f}%&#39;.format(round(df.iloc[0,16],1) / round(df.loc[0,past_date + &#39;누적&#39;],1) *100) # 전년비 rate = (round(df.iloc[0,16],1) / round(df.iloc[0,3],1) -1) * 100 if rate &gt;= 0.5 : rate = str(&#39;{:0,.1f}%&#39;.format(rate)) + &#39;↑&#39; elif rate &lt;= -0.5 : rate = str(&#39;{:0,.1f}%&#39;.format(abs(rate))) + &#39;↓&#39; else : rate = &#39;-&#39; row.cells[c+3].paragraphs[0].text = rate row.cells[2].paragraphs[0].add_run(&#39;대&#39;) elif t_kpi == &#39;자동화율&#39; : for i in range(0, c) : # 실제 값 넣기 row.cells[i+2].paragraphs[0].text = &#39;{:0,.1f}&#39;.format(col[i]) # 달성율 값 row.cells[c+2].paragraphs[0].text = &#39;{:0,.0f}%&#39;.format(round(df.iloc[0,16],1) / round(df.loc[0,past_date + &#39;누적&#39;],1) *100) # 전년비 rate = (round(df.iloc[0,16],1) - round(df.iloc[0,3],1)) if rate &gt;= 0.05 : rate = str(&#39;{:0,.1f}%&#39;.format(rate)) + &#39;p↑&#39; elif rate &lt;= -0.05 : rate = str(&#39;{:0,.1f}%&#39;.format(abs(rate))) + &#39;p↓&#39; else : rate = &#39;-&#39; row.cells[c+3].paragraphs[0].text = rate row.cells[2].paragraphs[0].add_run(&#39;%&#39;) elif t_kpi == &#39;공급능력지수&#39; : for i in range(0, c) : # 실제 값 넣기 row.cells[i+2].paragraphs[0].text = &#39;{:0,.1f}&#39;.format(col[i]) # 달성율 값 row.cells[c+2].paragraphs[0].text = &#39;{:0,.1f}%&#39;.format(round(df.iloc[0,16],1) / round(df.loc[0,past_date + &#39;누적&#39;],1) *100) # 전년비 rate = (round(df.iloc[0,16],1) - round(df.iloc[0,3],1)) if rate &gt;= 0.05 : rate = str(&#39;{:0,.1f}%&#39;.format(rate)) + &#39;p↑&#39; elif rate &lt;= -0.05 : rate = str(&#39;{:0,.1f}%&#39;.format(abs(rate))) + &#39;p↓&#39; else : rate = &#39;-&#39; row.cells[c+3].paragraphs[0].text = rate row.cells[2].paragraphs[0].add_run(&#39;%&#39;) elif t_kpi == &#39;운영Capa가동율&#39; : for i in range(0, c) : # 실제 값 넣기 row.cells[i+2].paragraphs[0].text = &#39;{:0,.1f}&#39;.format(col[i]) # 달성율 값 row.cells[c+2].paragraphs[0].text = &#39;{:0,.0f}%&#39;.format(round(df.iloc[0,16],1) / round(df.loc[0,past_date + &#39;누적&#39;],1) *100) # 전년비 rate = (round(df.iloc[0,16],1) - round(df.iloc[0,3],1)) if rate &gt;= 0.05 : rate = str(&#39;{:0,.1f}%&#39;.format(rate)) + &#39;p↑&#39; elif rate &lt;= -0.05 : rate = str(&#39;{:0,.1f}%&#39;.format(abs(rate))) + &#39;p↓&#39; else : rate = &#39;-&#39; row.cells[c+3].paragraphs[0].text = rate row.cells[2].paragraphs[0].add_run(&#39;%&#39;) elif t_kpi == &#39;총공정불량율&#39; : for i in range(0, c) : # 실제 값 넣기 row.cells[i+2].paragraphs[0].text = &#39;{:0,.0f}&#39;.format(col[i]) # 달성율 값 row.cells[c+2].paragraphs[0].text = &#39;{:0,.0f}%&#39;.format(round(df.loc[0,past_date + &#39;누적&#39;],0) / round(df.iloc[0,16],0) *100) # 전년비 rate = (round(df.iloc[0,16],0) / round(df.iloc[0,3],0) -1) * 100 if rate &gt;= 0.5 : rate = str(&#39;{:0,.1f}%&#39;.format(rate)) + &#39;↑&#39; elif rate &lt;= -0.5 : rate = str(&#39;{:0,.1f}%&#39;.format(abs(rate))) + &#39;↓&#39; else : rate = &#39;-&#39; row.cells[c+3].paragraphs[0].text = rate row.cells[2].paragraphs[0].add_run(&#39;ppm&#39;) elif t_kpi == &#39;제조인력&#39; : for i in range(0, c) : # 실제 값 넣기 row.cells[i+2].paragraphs[0].text = &#39;{:0,.0f}&#39;.format(col[i]) # 달성율 값 row.cells[c+2].paragraphs[0].text = &#39;{:0,.0f}%&#39;.format(round(df.loc[0,past_date + &#39;누적&#39;],0) / round(df.iloc[0,16],0) *100) # 전년비 rate = (round(df.iloc[0,16],0) / round(df.iloc[0,3],0) -1) * 100 if rate &gt;= 0.5 : rate = str(&#39;{:0,.1f}%&#39;.format(rate)) + &#39;↑&#39; elif rate &lt;= -0.5 : rate = str(&#39;{:0,.1f}%&#39;.format(abs(rate))) + &#39;↓&#39; else : rate = &#39;-&#39; row.cells[c+3].paragraphs[0].text = rate row.cells[2].paragraphs[0].add_run(&#39;명&#39;) elif t_kpi == &#39;SOP실행율&#39; : for i in range(0, c) : # 실제 값 넣기 row.cells[i+2].paragraphs[0].text = &#39;{:0,.1f}&#39;.format(col[i]) # 달성율 값 row.cells[c+2].paragraphs[0].text = &#39;{:0,.1f}%&#39;.format(round(df.iloc[0,16],1) / round(df.loc[0,past_date + &#39;누적&#39;],1) *100) # 전년비 rate = (round(df.iloc[0,16],1) - round(df.iloc[0,3],1)) if rate &gt;= 0.05 : rate = str(&#39;{:0,.1f}%&#39;.format(rate)) + &#39;p↑&#39; elif rate &lt;= -0.05 : rate = str(&#39;{:0,.1f}%&#39;.format(abs(rate))) + &#39;p↓&#39; else : rate = &#39;-&#39; row.cells[c+3].paragraphs[0].text = rate row.cells[2].paragraphs[0].add_run(&#39;%&#39;) col = [] t = t+1 # row.cells[2].paragraphs[0].text = &#39;{:0,.2f}&#39;.format(df.iloc[0,3]) # row.cells[3].paragraphs[0].text = df.iloc[0,&#39;누적목표&#39;] # 타이틀 수정 doc.tables[0].rows[0].cells[0].paragraphs[1].text = past_date + &#39; 제조 KPI 실적&#39; # 표 컬럼 수정(3개월로 변경되면 10으로 바꿔야함!)################################ tc = 10 # 본문수정 c = 0 for p in doc.paragraphs: if c == 17 : p.add_run(now_date) # DX 대당제조가공비 elif c == 21 : acc_target = doc.tables[1].rows[3].cells[4].paragraphs[0].text acc_result = doc.tables[1].rows[3].cells[tc-2].paragraphs[0].text pct = doc.tables[1].rows[3].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 $&#39; + acc_target + &#39; 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 22 : last_year = doc.tables[1].rows[3].cells[2].paragraphs[0].text ypct = doc.tables[1].rows[3].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) # DX 부품 elif c == 23 : acc_target = doc.tables[1].rows[3].cells[4].paragraphs[1].text acc_result = doc.tables[1].rows[3].cells[tc-2].paragraphs[1].text pct = doc.tables[1].rows[3].cells[tc-1].paragraphs[1].text p.add_run(past_date + &#39; 누적목표 $&#39; + acc_target + &#39;, 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) # DX 인당생산대수 elif c == 24 : acc_target = doc.tables[1].rows[4].cells[4].paragraphs[0].text acc_result = doc.tables[1].rows[4].cells[tc-2].paragraphs[0].text pct = doc.tables[1].rows[4].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 &#39; + acc_target + &#39;대 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 25 : last_year = doc.tables[1].rows[4].cells[2].paragraphs[0].text ypct = doc.tables[1].rows[4].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) # DX 자동화율 elif c == 26 : acc_target = doc.tables[1].rows[5].cells[4].paragraphs[0].text acc_result = doc.tables[1].rows[5].cells[tc-2].paragraphs[0].text pct = doc.tables[1].rows[5].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 &#39; + acc_target + &#39;% 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 27 : last_year = doc.tables[1].rows[5].cells[2].paragraphs[0].text ypct = doc.tables[1].rows[5].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) ############################################################################################ # MX 대당제조가공비 elif c == 31 : acc_target = doc.tables[2].rows[3].cells[4].paragraphs[0].text acc_result = doc.tables[2].rows[3].cells[tc-2].paragraphs[0].text pct = doc.tables[2].rows[3].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 $&#39; + acc_target + &#39; 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 32 : last_year = doc.tables[2].rows[3].cells[2].paragraphs[0].text ypct = doc.tables[2].rows[3].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) # MX 부품 elif c == 33 : acc_target = doc.tables[2].rows[3].cells[4].paragraphs[1].text acc_result = doc.tables[2].rows[3].cells[tc-2].paragraphs[1].text pct = doc.tables[2].rows[3].cells[tc-1].paragraphs[1].text p.add_run(past_date + &#39; 누적목표 $&#39; + acc_target + &#39;, 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) # MX 인당생산대수 elif c == 34 : acc_target = doc.tables[2].rows[4].cells[4].paragraphs[0].text acc_result = doc.tables[2].rows[4].cells[tc-2].paragraphs[0].text pct = doc.tables[2].rows[4].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 &#39; + acc_target + &#39;대 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 35 : last_year = doc.tables[2].rows[4].cells[2].paragraphs[0].text ypct = doc.tables[2].rows[4].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) # MX 자동화율 elif c == 36 : acc_target = doc.tables[2].rows[5].cells[4].paragraphs[0].text acc_result = doc.tables[2].rows[5].cells[tc-2].paragraphs[0].text pct = doc.tables[2].rows[5].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 &#39; + acc_target + &#39;% 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 37 : last_year = doc.tables[2].rows[5].cells[2].paragraphs[0].text ypct = doc.tables[2].rows[5].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) ############################################################################################ # vd 대당제조가공비 elif c == 40 : acc_target = doc.tables[3].rows[3].cells[4].paragraphs[0].text acc_result = doc.tables[3].rows[3].cells[tc-2].paragraphs[0].text pct = doc.tables[3].rows[3].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 $&#39; + acc_target + &#39; 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 41 : last_year = doc.tables[3].rows[3].cells[2].paragraphs[0].text ypct = doc.tables[3].rows[3].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) # vd 부품 elif c == 42 : acc_target = doc.tables[3].rows[3].cells[4].paragraphs[1].text acc_result = doc.tables[3].rows[3].cells[tc-2].paragraphs[1].text pct = doc.tables[3].rows[3].cells[tc-1].paragraphs[1].text p.add_run(past_date + &#39; 누적목표 $&#39; + acc_target + &#39;, 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) # vd 인당생산대수 elif c == 43 : acc_target = doc.tables[3].rows[4].cells[4].paragraphs[0].text acc_result = doc.tables[3].rows[4].cells[tc-2].paragraphs[0].text pct = doc.tables[3].rows[4].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 &#39; + acc_target + &#39;대 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 44 : last_year = doc.tables[3].rows[4].cells[2].paragraphs[0].text ypct = doc.tables[3].rows[4].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) # vd 자동화율 elif c == 45 : acc_target = doc.tables[3].rows[5].cells[4].paragraphs[0].text acc_result = doc.tables[3].rows[5].cells[tc-2].paragraphs[0].text pct = doc.tables[3].rows[5].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 &#39; + acc_target + &#39;% 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 46 : last_year = doc.tables[3].rows[5].cells[2].paragraphs[0].text ypct = doc.tables[3].rows[5].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) ############################################################################################ # 가전 대당제조가공비 elif c == 49 : acc_target = doc.tables[4].rows[3].cells[4].paragraphs[0].text acc_result = doc.tables[4].rows[3].cells[tc-2].paragraphs[0].text pct = doc.tables[4].rows[3].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 $&#39; + acc_target + &#39; 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 50: last_year = doc.tables[4].rows[3].cells[2].paragraphs[0].text ypct = doc.tables[4].rows[3].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) # 가전 부품 elif c == 51 : acc_target = doc.tables[4].rows[3].cells[4].paragraphs[1].text acc_result = doc.tables[4].rows[3].cells[tc-2].paragraphs[1].text pct = doc.tables[4].rows[3].cells[tc-1].paragraphs[1].text p.add_run(past_date + &#39; 누적목표 $&#39; + acc_target + &#39;, 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) # 가전 인당생산대수 elif c == 52 : acc_target = doc.tables[4].rows[4].cells[4].paragraphs[0].text acc_result = doc.tables[4].rows[4].cells[tc-2].paragraphs[0].text pct = doc.tables[4].rows[4].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 &#39; + acc_target + &#39;대 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 53 : last_year = doc.tables[4].rows[4].cells[2].paragraphs[0].text ypct = doc.tables[4].rows[4].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) # 가전 자동화율 elif c == 54: acc_target = doc.tables[4].rows[5].cells[4].paragraphs[0].text acc_result = doc.tables[4].rows[5].cells[tc-2].paragraphs[0].text pct = doc.tables[4].rows[5].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 &#39; + acc_target + &#39;% 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 55 : last_year = doc.tables[4].rows[5].cells[2].paragraphs[0].text ypct = doc.tables[4].rows[5].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) ############################################################################################ # N/W 대당제조가공비 elif c == 58 : acc_target = doc.tables[5].rows[3].cells[4].paragraphs[0].text acc_result = doc.tables[5].rows[3].cells[tc-2].paragraphs[0].text pct = doc.tables[5].rows[3].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 $&#39; + acc_target + &#39; 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 59: last_year = doc.tables[5].rows[3].cells[2].paragraphs[0].text ypct = doc.tables[5].rows[3].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) # N/W 인당생산대수 elif c == 60 : acc_target = doc.tables[5].rows[4].cells[4].paragraphs[0].text acc_result = doc.tables[5].rows[4].cells[tc-2].paragraphs[0].text pct = doc.tables[5].rows[4].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 &#39; + acc_target + &#39;대 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 61 : last_year = doc.tables[5].rows[4].cells[2].paragraphs[0].text ypct = doc.tables[5].rows[4].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) # N/W 자동화율 elif c == 62 : acc_target = doc.tables[5].rows[5].cells[4].paragraphs[0].text acc_result = doc.tables[5].rows[5].cells[tc-2].paragraphs[0].text pct = doc.tables[5].rows[5].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 &#39; + acc_target + &#39;% 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 63 : last_year = doc.tables[5].rows[5].cells[2].paragraphs[0].text ypct = doc.tables[5].rows[5].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) ############################################################################################ # 의료기기 대당제조가공비 elif c == 67: acc_target = doc.tables[6].rows[3].cells[4].paragraphs[0].text acc_result = doc.tables[6].rows[3].cells[tc-2].paragraphs[0].text pct = doc.tables[6].rows[3].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 $&#39; + acc_target + &#39; 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 68 : last_year = doc.tables[6].rows[3].cells[2].paragraphs[0].text ypct = doc.tables[6].rows[3].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) # 의료기기 제조인력 elif c == 69 : acc_target = doc.tables[6].rows[4].cells[4].paragraphs[0].text acc_result = doc.tables[6].rows[4].cells[tc-2].paragraphs[0].text pct = doc.tables[6].rows[4].cells[tc-1].paragraphs[0].text p.add_run(past_date + &#39; 누적목표 &#39; + acc_target + &#39;명 比 실적 &#39; + acc_result + &#39;(달성율 &#39;+ pct + &#39;)&#39;) elif c == 70 : last_year = doc.tables[6].rows[4].cells[2].paragraphs[0].text ypct = doc.tables[6].rows[4].cells[tc].paragraphs[0].text p.add_run(str(int(yr)-1) + &#39;년실적 &#39; + last_year + &#39; 比 &#39; + ypct ) c = c+1 doc.save(&#39;D: 2022년 M-MAP TF KPI Report RPA ★ &#39; + past_date + &#39; DX부문 제조KPI_F.docx&#39;) etime = datetime.datetime.now() print(etime - stime) for x, paragraph in enumerate(doc.paragraphs) : if paragraph.text != &#39;&#39; : print(str(x) + &#39; : &#39; + paragraph.text) .",
            "url": "https://rikihong.github.io/topgun/python/jupyter/2022/11/02/KPI_Report2.html",
            "relUrl": "/python/jupyter/2022/11/02/KPI_Report2.html",
            "date": " • Nov 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rikihong.github.io/topgun/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rikihong.github.io/topgun/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "수상 . ’-‘ 장학금 . 프로젝트 . ’-‘ 2022년 MMAP 프로젝트 . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rikihong.github.io/topgun/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rikihong.github.io/topgun/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}